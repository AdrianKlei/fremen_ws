// Generated by gencpp from file frongo/GraphModelRequest.msg
// DO NOT EDIT!


#ifndef FRONGO_MESSAGE_GRAPHMODELREQUEST_H
#define FRONGO_MESSAGE_GRAPHMODELREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace frongo
{
template <class ContainerAllocator>
struct GraphModelRequest_
{
  typedef GraphModelRequest_<ContainerAllocator> Type;

  GraphModelRequest_()
    : model_name()
    , from_val(0)
    , until_val(0)
    , increment(0)  {
    }
  GraphModelRequest_(const ContainerAllocator& _alloc)
    : model_name(_alloc)
    , from_val(0)
    , until_val(0)
    , increment(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_name_type;
  _model_name_type model_name;

   typedef int32_t _from_val_type;
  _from_val_type from_val;

   typedef int32_t _until_val_type;
  _until_val_type until_val;

   typedef int32_t _increment_type;
  _increment_type increment;





  typedef boost::shared_ptr< ::frongo::GraphModelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::frongo::GraphModelRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GraphModelRequest_

typedef ::frongo::GraphModelRequest_<std::allocator<void> > GraphModelRequest;

typedef boost::shared_ptr< ::frongo::GraphModelRequest > GraphModelRequestPtr;
typedef boost::shared_ptr< ::frongo::GraphModelRequest const> GraphModelRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::frongo::GraphModelRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::frongo::GraphModelRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace frongo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::frongo::GraphModelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frongo::GraphModelRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frongo::GraphModelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frongo::GraphModelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frongo::GraphModelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frongo::GraphModelRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::frongo::GraphModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32cb64561f7cbcfca1ab9245b16357c6";
  }

  static const char* value(const ::frongo::GraphModelRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32cb64561f7cbcfcULL;
  static const uint64_t static_value2 = 0xa1ab9245b16357c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::frongo::GraphModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "frongo/GraphModelRequest";
  }

  static const char* value(const ::frongo::GraphModelRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::frongo::GraphModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string model_name\n\
int32  from_val\n\
int32  until_val\n\
int32  increment\n\
";
  }

  static const char* value(const ::frongo::GraphModelRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::frongo::GraphModelRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_name);
      stream.next(m.from_val);
      stream.next(m.until_val);
      stream.next(m.increment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraphModelRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::frongo::GraphModelRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::frongo::GraphModelRequest_<ContainerAllocator>& v)
  {
    s << indent << "model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_name);
    s << indent << "from_val: ";
    Printer<int32_t>::stream(s, indent + "  ", v.from_val);
    s << indent << "until_val: ";
    Printer<int32_t>::stream(s, indent + "  ", v.until_val);
    s << indent << "increment: ";
    Printer<int32_t>::stream(s, indent + "  ", v.increment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRONGO_MESSAGE_GRAPHMODELREQUEST_H
