// Generated by gencpp from file frongo/PredictStateOrderRequest.msg
// DO NOT EDIT!


#ifndef FRONGO_MESSAGE_PREDICTSTATEORDERREQUEST_H
#define FRONGO_MESSAGE_PREDICTSTATEORDERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace frongo
{
template <class ContainerAllocator>
struct PredictStateOrderRequest_
{
  typedef PredictStateOrderRequest_<ContainerAllocator> Type;

  PredictStateOrderRequest_()
    : model_name()
    , order(0)
    , epochs()  {
    }
  PredictStateOrderRequest_(const ContainerAllocator& _alloc)
    : model_name(_alloc)
    , order(0)
    , epochs(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_name_type;
  _model_name_type model_name;

   typedef int32_t _order_type;
  _order_type order;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _epochs_type;
  _epochs_type epochs;





  typedef boost::shared_ptr< ::frongo::PredictStateOrderRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::frongo::PredictStateOrderRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PredictStateOrderRequest_

typedef ::frongo::PredictStateOrderRequest_<std::allocator<void> > PredictStateOrderRequest;

typedef boost::shared_ptr< ::frongo::PredictStateOrderRequest > PredictStateOrderRequestPtr;
typedef boost::shared_ptr< ::frongo::PredictStateOrderRequest const> PredictStateOrderRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::frongo::PredictStateOrderRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::frongo::PredictStateOrderRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace frongo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::frongo::PredictStateOrderRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frongo::PredictStateOrderRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frongo::PredictStateOrderRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frongo::PredictStateOrderRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frongo::PredictStateOrderRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frongo::PredictStateOrderRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::frongo::PredictStateOrderRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12294f3ad15fc37d4df0341d7cace8c8";
  }

  static const char* value(const ::frongo::PredictStateOrderRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12294f3ad15fc37dULL;
  static const uint64_t static_value2 = 0x4df0341d7cace8c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::frongo::PredictStateOrderRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "frongo/PredictStateOrderRequest";
  }

  static const char* value(const ::frongo::PredictStateOrderRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::frongo::PredictStateOrderRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string model_name\n\
int32    order\n\
uint32[] epochs\n\
";
  }

  static const char* value(const ::frongo::PredictStateOrderRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::frongo::PredictStateOrderRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_name);
      stream.next(m.order);
      stream.next(m.epochs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictStateOrderRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::frongo::PredictStateOrderRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::frongo::PredictStateOrderRequest_<ContainerAllocator>& v)
  {
    s << indent << "model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_name);
    s << indent << "order: ";
    Printer<int32_t>::stream(s, indent + "  ", v.order);
    s << indent << "epochs[]" << std::endl;
    for (size_t i = 0; i < v.epochs.size(); ++i)
    {
      s << indent << "  epochs[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.epochs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRONGO_MESSAGE_PREDICTSTATEORDERREQUEST_H
