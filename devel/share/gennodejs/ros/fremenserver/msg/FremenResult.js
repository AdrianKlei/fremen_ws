// Auto-generated. Do not edit!

// (in-package fremenserver.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class FremenResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.success = null;
      this.message = null;
      this.probabilities = null;
      this.entropies = null;
      this.errors = null;
      this.anomalyTimes = null;
      this.anomalyValues = null;
    }
    else {
      if (initObj.hasOwnProperty('success')) {
        this.success = initObj.success
      }
      else {
        this.success = 0;
      }
      if (initObj.hasOwnProperty('message')) {
        this.message = initObj.message
      }
      else {
        this.message = '';
      }
      if (initObj.hasOwnProperty('probabilities')) {
        this.probabilities = initObj.probabilities
      }
      else {
        this.probabilities = [];
      }
      if (initObj.hasOwnProperty('entropies')) {
        this.entropies = initObj.entropies
      }
      else {
        this.entropies = [];
      }
      if (initObj.hasOwnProperty('errors')) {
        this.errors = initObj.errors
      }
      else {
        this.errors = [];
      }
      if (initObj.hasOwnProperty('anomalyTimes')) {
        this.anomalyTimes = initObj.anomalyTimes
      }
      else {
        this.anomalyTimes = [];
      }
      if (initObj.hasOwnProperty('anomalyValues')) {
        this.anomalyValues = initObj.anomalyValues
      }
      else {
        this.anomalyValues = [];
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type FremenResult
    // Serialize message field [success]
    bufferOffset = _serializer.int32(obj.success, buffer, bufferOffset);
    // Serialize message field [message]
    bufferOffset = _serializer.string(obj.message, buffer, bufferOffset);
    // Serialize message field [probabilities]
    bufferOffset = _arraySerializer.float32(obj.probabilities, buffer, bufferOffset, null);
    // Serialize message field [entropies]
    bufferOffset = _arraySerializer.float32(obj.entropies, buffer, bufferOffset, null);
    // Serialize message field [errors]
    bufferOffset = _arraySerializer.float32(obj.errors, buffer, bufferOffset, null);
    // Serialize message field [anomalyTimes]
    bufferOffset = _arraySerializer.uint32(obj.anomalyTimes, buffer, bufferOffset, null);
    // Serialize message field [anomalyValues]
    bufferOffset = _arraySerializer.uint32(obj.anomalyValues, buffer, bufferOffset, null);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type FremenResult
    let len;
    let data = new FremenResult(null);
    // Deserialize message field [success]
    data.success = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [message]
    data.message = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [probabilities]
    data.probabilities = _arrayDeserializer.float32(buffer, bufferOffset, null)
    // Deserialize message field [entropies]
    data.entropies = _arrayDeserializer.float32(buffer, bufferOffset, null)
    // Deserialize message field [errors]
    data.errors = _arrayDeserializer.float32(buffer, bufferOffset, null)
    // Deserialize message field [anomalyTimes]
    data.anomalyTimes = _arrayDeserializer.uint32(buffer, bufferOffset, null)
    // Deserialize message field [anomalyValues]
    data.anomalyValues = _arrayDeserializer.uint32(buffer, bufferOffset, null)
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.message.length;
    length += 4 * object.probabilities.length;
    length += 4 * object.entropies.length;
    length += 4 * object.errors.length;
    length += 4 * object.anomalyTimes.length;
    length += 4 * object.anomalyValues.length;
    return length + 28;
  }

  static datatype() {
    // Returns string type for a message object
    return 'fremenserver/FremenResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'c4d21afc2fe08d781143d26587909bbe';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #result definition
    int32 success		#action result - positive value indicates success, negative indicates error
    string message 		#detailed message
    float32[] probabilities	#probabilities of the states calculated by the 'predict' action for the particular 'times', probability of a given observation for the 'detect' action
    float32[] entropies	#entropies of the states calculated by the 'entropy' action for the particular 'times'
    float32[] errors 	#prediction errors for the various model orders given by the 'evaluate' action
    uint32[]  anomalyTimes 	#the time instants of detected anomalies 
    uint32[]  anomalyValues	#the observed anomaous states 
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new FremenResult(null);
    if (msg.success !== undefined) {
      resolved.success = msg.success;
    }
    else {
      resolved.success = 0
    }

    if (msg.message !== undefined) {
      resolved.message = msg.message;
    }
    else {
      resolved.message = ''
    }

    if (msg.probabilities !== undefined) {
      resolved.probabilities = msg.probabilities;
    }
    else {
      resolved.probabilities = []
    }

    if (msg.entropies !== undefined) {
      resolved.entropies = msg.entropies;
    }
    else {
      resolved.entropies = []
    }

    if (msg.errors !== undefined) {
      resolved.errors = msg.errors;
    }
    else {
      resolved.errors = []
    }

    if (msg.anomalyTimes !== undefined) {
      resolved.anomalyTimes = msg.anomalyTimes;
    }
    else {
      resolved.anomalyTimes = []
    }

    if (msg.anomalyValues !== undefined) {
      resolved.anomalyValues = msg.anomalyValues;
    }
    else {
      resolved.anomalyValues = []
    }

    return resolved;
    }
};

module.exports = FremenResult;
